 第五课 c#语言基本元素概览，初始类型、变量与方法，算法简介
难度：100

构成c#语言的基本元素
	MSDN文档：Visual Basic and Visual c# --> Visual C# --> C#Reference
	标记(Token): 对于编译器来说是有意义的记号，编译器能够识别的东西
		关键字(Keyword)
		操作符(Operator)
			“.”: 成员访问操作符
		标识符(Identifier)
			标识符就是取名字
				变量
				类
					名词
					名词复数
				类的成员
					属性
						名词
						名词复数
					方法
						动词
						动词短语
					事件
			什么是合法的标识符
				合法: 编译器能够编译的标识符
					标识符，不能够跟关键字冲突
						1. 关键字（保留字）：这门编程语言已经把这个词保留了，不能再拿来当标识符用
					可以用字母，数字，下划线，组成标识符
					不能拿数字开头
				不合法: 的就是编译器会报错的标识符
				怎样阅读语言定义文档
			大小写规范
				c#变量名都是用的驼峰法
				   方法名，类名，名称空间，都是用Pascal法
				   
				Java 变量名，方法名，类名，都是用的Pascal法
			命名规范
		标点符号
			是符号，但是不参与运算，所以叫做标点符号
			分号(;)：表示一个语句的结束
			大括号
			
		文本(字面值)
			整数
				多种后缀
					L：长整型后缀
				int
				long
			实数：小数
				默认为双精度
				多种后缀
					F: 单精度后缀
					D: 双精度后缀
				float   
					单精度
				double
					双精度
			字符
				'' 单引号
				char
				只能是一个字符，为一个字符类型的变量赋值
			字符串
				"" 双引号
				string
			布尔
				bool
					true
					false
			空(null)
	注释与空白
		单行
			//
		多行(块注释)
			/* dsfaf */
		空白
			空格或回车
			注释在编译器编译时，被当作空白来对待
	简要介绍类型、变量与方法
		初识类型(Type)
			亦称数据类型(Data Type)
				关键字"var"声明变量,C# 编译器会自动推断var声明的是什么值
				Console.WriteLine(x.GetType().Name)  或者变量的类型
					int32, 拿32个bit存储的整数
					int64, 拿64个bit存储的整数
				数据类型不同，编译器处理方式不同
				一般都是准确的声明变量类型，而不是用var
		变量是存放数据的地方，简称"数据"
			变量的声明
				前面是变量的类型，后面是变量的标识符
				变量的类型与数据要相匹配
			变量的使用
		方法(旧称函数)是处理数据的逻辑，又称"算法"
			方法或函数，为数据的加工厂
			方法的声明
				class Calculator {
					//函数定义
						// public 是开放的公有方法
						// int 是代表方法返回值是int类型的
						// Add 是方法名
						// 小括号里面的是参数变量
						// 大括号里面的是方法
					public int Add(int a,int b){
						int result = a + b;
						return result;
					}
						// 没有参数变量的方法
					public string Today(){
						int day = DateTime.Now.Day;
						return day.ToString();
					}
						// 没有返回数据的方法
						// 没有数据返回的时候，要用 "void" 作为返回值类型
					public void PrintSum(int a,int b){
						int result = a + b
						Console.WriteLine(result)
					}
				}
				函数的参数，也是变量，叫参数变量
			方法的调用
				Calculator c = new Calculator();
				int x = c.Add(2,3);
				Console.WriteLine(x)；
				string str = c.Today();
				Console.WriteLine(str)
				c.PrintSum(4,6);
				
		程序=数据+算法
			有了变量和方法就可以写有意义的程序了
	算法简介 
		循环(迭代)初体验
			public void PrintXTo1(int x){
				for (int i = x;i > 0;i--){
					Console.WriteLine(i);
				}
			}
			c.PrintXTo1(10);
		递归初体验
			递归: 一个函数或方法可以调用自己
			public void PrintXTo1(int x){
				if (x == 1){
					Console.WriteLine(x);
				} else{
					Console.WriteLine(x);
					PrintXTo1(x - 1);
				}
			}
			c.PrintXTo1(10);
		计算1到100的和
			// 用循环来做
			public int SumForm1ToX(int x){
				int result = 0;
				for (int i = 0;i < x + 1;i++){
					result = result + i;
				}
				return result;
			}
			
			int result = c.SumForm1ToX(100);
			Console.WriteLine(result);
			
			// 用递归来做
			public int SumForm1ToX(int x){
				int result = 0;
				if (x == 1){
					return 1;
				}else{
					int result = x + SumForm1ToX(x - 1);
					return result;
				}
			}
			
			int result = c.SumForm1ToX(100);
			Console.WriteLine(result);
			
			// 用算式来做
			public int SumForm1ToX(int x){
				return (1 + x) * x / 2;
			}