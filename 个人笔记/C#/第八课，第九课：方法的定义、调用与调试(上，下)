第八课，第九课：方法的定义、调用与调试(上，下)

方法的由来
	方法(method) 的前身是 c/c++ 语言的函数(function)
		方法是面向对象范畴的概念，在非面向对象语言中仍然称为函数
		使用 c/c++ 语言做对比
	永远都是类(或结构体)的成员
		c#语言中函数不可能独立于类(或结构体)之外
		只有作为类(结构体)的成员时才被称为方法
		c++中时可以的，称为"全局函数"
	是类(或结构体)最基本的成员之一
		最基本的成员只有两个————字段与方法(成员变量与成员函数)，本质还是数据+算法
		方法表示类(或结构体)"能做什么事情"
	为什么需要方法和函数
		目的1：隐藏复杂的逻辑
		目的2：把大算法分解为小算法
		目的3：复用(reuse，重用)
		示例：计算圆面积、圆柱体积、圆锥体积
方法的定义(声明)与调用
	声明方法的语法详解
		参见 C# 语言文档(声明/定义不分家)
		Parameter 全称为"formal parameter"
		形式上的参数，简称"形参"
		Parameter是一种变量
	为方的命名规范
		大小写规范
		需要以动词或者动词短语作为名字
	重温静态(static)方法和实例方法
		下面示例5
	调用方法
		调用方法：方法名后面跟上一对小括号
			小括号: 不能省略，方法调用操作符
				小括号中写入实际参数，实参，Argument
		Argument中文C#文档的官方译法为"实际参数", 简称"实参"，可理解为调用方法时的真实条件
		调用方法时的 argument 列表要与定义方法时的 parameter 列表相匹配
			C# 是强类型语言，argument 是值、parameter 是变量, 值与变量一定要匹配，不然编译器会报错
构造器(一种特殊的方法)
	构造器(constructor)是类型的成员之一
	狭义的构造器指的是"实例构造器"(instance constructor)
	如何调用构造器
		示例6,示例7
	声明构造器
		示例6,示例7
	构造器的内存原理
		栈的地址是，高的地址先分配，往低的地址慢慢分配，直到最低的，最后就栈溢出了
方法的重载(Overload)
	调用重载方法的示例
		示例8
	声明带有重载的方法
		方法签名(method signature)由方法的名称、类型形参的个数和它的每一个形参(从左到右的顺序)的类型和种类(值、引用或输出)组成。注：方法签名不包含返回类型
		实例构造函数签名由它的每一个形参(按从左到右的顺序)的类型和种类(值、引用或输出)组成。
		重载决策(到底调用哪一个重载)：用于在给定了参数列表和一组候选函数成员的情况下，选择一个最佳函数成员来实施调用。
			示例8
如何对方法进行Debug
	设置断点(breakpoint)
	观察方法调用时的call stack
	Step-in, Step-over,Step-out
	观察局部变量的值与变化
方法的调用与栈*
	方法调用时栈内存的分配
		对 stack frame 的分析
			stack frame : 一个方法在被调用的时候，它在栈内存当中的布局


作业：
	理解并熟记所有概念
	完成视频中的实例，直至能够默写


示例1：C语言中的函数
	name: CFun
	Project: Empty Project
	source_file: source.c
	content:
		#include <stdio.h> // 标准输入输出引入
		
		//Function fun
		double Add(double a, double b){
			return a + b;
		}
		
		int main(){
			printf("Hello,World!")
			double x = 1.0;
			double y = 5.0;
			double result = Add(x,y);
			printf("%f+%f=%f",x,y,result)
		}
		
示例2：C++语言中的函数，C++是对C语言的一个扩展，在这个扩展当中，C++语言完整保留了C语言所有的语言
	name: CppFun
	Project: Empty Project
	source_file: source.cpp
	content:
		#include <iostream>
		
		double Add(double a, double b){
			return a + b;
		}
		
		int main(){
			std::cout << "Hello,World!!";
			double x = 3.0;
			double y = 5.0;
			double result = Add(x,y);
			std::cout << x << "+" << y << "=" << result;
			return 0;
		}
		
示例3：C++ 语言函数变成方法的示例
	项目 --> 添加一个类文件 --> class name: student
		会自动生成两个文件
		student.h: 头文件，是对这个类的声明
		student.cpp: C++源文件，是对这个类的定义
	
	student.h:
		#pragma once
		class Student{
			public:
				Student();
				~Student();
				void SayHello();
				double Add(double a, double b);
				
		}
	student.cpp:
		#include "Student.h"
		#include <iostream>
		
		Student::Student(){
		}
		
		Student::~Student(){
		}
		
		void Student::SayHello(){
			std::cout << "Hello! I'm a Student."
		}
		
		double Student::Add(double a, double b){
			return a + b;
		}
		
	source.cpp:
		// 标准库用尖括号引入
		#include <iostream>
		// 自己定义的头文件用引号引起来
		#include "Student.h"
		
		double Add(double a, double b){
			return a + b;
		}
		
		int main(){
			// *声明一个指针，
			Student *pStu1 = new Student();
			pStu->SayHello();
			
			double x = 3.0;
			double y = 5.0;
			double result = pStu->Add(x,y);
			std::cout << x << "+" << y << "=" << result;
			return 0;
		}
		
示例4：C# 方法的演示，演示需要方法的三个目的
			从大到小的分解方法是，自顶向下逐步求精的算法，标准的面向过程的方法
	name: CSharpFun
	Project: Console Application
	content:
		目的：复用,分解
			Calculator c = new Calculator();
			Console.Wirteline(c.GetCircleArea(10));
		
			class Calculator{
				public double GetCircleArea(double r){
					return Math.PI * r * r;
				}
				
				public double GetCylinderVolume(double r, double h){
					return GetCircleArea(r) * h;
				}
				
				public double GetConeVolume(double r, double h){
					result GetCylinderVolume(r,h) / 3;
				}
			}
			
			
示例5：C# Staic 方法重温
	name: CSharpFun
	Project: Console Application
	content:
		目的：复用,分解
		
			Calculator c = new Calculator();
			Console.Wirteline(c.GetCircleArea(10));
			
			实例方法的时候，是将Calculator实例化(new)之后使用
			静态方式将是类自己的方法
			Console.Wirteline(Calculator.GetCircleArea(100))
		
			class Calculator{
				public static double GetCircleArea(double r){
					return Math.PI * r * r;
				}
				
				public static double GetCylinderVolume(double r, double h){
					return GetCircleArea(r) * h;
				}
				
				public static double GetConeVolume(double r, double h){
					result GetCylinderVolume(r,h) / 3;
				}
			}
			
			
			
实例6: 构造器的调用，与没有初始值的构造器
	Student stu = new Student();
	Console.Wirteline(stu.ID)
	Console.Wirteline(stu.Name)

	Class Student{
		public Student(){
			this.ID = 1;
			this.Name = "No name";
		}
		public int ID;
		public string Name;
	}
	
实例7：有初始值的构造器
	Student stu = new Student(2,"Mr.OKay");
	Console.Wirteline(stu.ID);
	Console.Wirteline(stu.Name);
	Console.Wirteline("================================");
	Student stu2 = new Student();
	Console.Wirteline(stu2.ID);
	Console.Wirteline(stu2.Name);

	Class Student{
		public Student(int initId,string initName){
			this.ID = initID;
			this.Name = initName;
		}
		
		public Student(){
			this.ID = 1;
			this.Name = "No Name";
		}
		public int ID;
		public string Name;
	}

示例8： 方法的重载
	
	Calculator c = new Calculator();
	# 输入的值是什么，默认会调用匹配的重载
	int x = c.Add(100,100);
	Console.Wirteline(x)
	
	class Calculator{
		public int Add(int a, int b){
			return a + b;
		}
		
		#参数的参数变化
		public int Add(int a, int b, int c){
			return a + b + c;
		}
		
		#参数列表的变化
		public double Add(double x, double y){
			return x + y;
		}
		
		# 参数的种类变化
		public int Add(ref int a, int b){
			return a + b;
		}
		public int Add(out int a, int b){
			return a + b;
		}
	}



